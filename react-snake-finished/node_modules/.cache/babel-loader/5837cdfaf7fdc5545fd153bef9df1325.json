{"ast":null,"code":"var _jsxFileName = \"/home/lucasmocellin/react-snake-starter-files/react-snake-finished/src/App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, SCALE, SPEED, DIRECTIONS } from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apples, setApples] = useState([]);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApple = () => {\n    const x = Math.floor(Math.random() * (CANVAS_SIZE[0] / SCALE));\n    const y = Math.floor(Math.random() * (CANVAS_SIZE[1] / SCALE));\n    return {\n      x,\n      y\n    };\n  };\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece.x * SCALE >= CANVAS_SIZE[0] || piece.x < 0 || piece.y * SCALE >= CANVAS_SIZE[1] || piece.y < 0) return true;\n\n    for (const segment of snk) {\n      if (piece.x === segment.x && piece.y === segment.y) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    let newApples = [];\n\n    for (let i = 0; i < 4; i++) {\n      let newApple = createApple();\n\n      while (checkCollision(newApple, newSnake) || newApples.some(apple => apple.x === newApple.x && apple.y === newApple.y)) {\n        newApple = createApple();\n      }\n\n      newApples.push(newApple);\n    }\n\n    setApples(newApples);\n    return true;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = {\n      x: snakeCopy[0].x + dir[0],\n      y: snakeCopy[0].y + dir[1]\n    };\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    const initialApples = [];\n\n    for (let i = 0; i < 4; i++) {\n      initialApples.push(createApple());\n    }\n\n    setApples(initialApples);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n    context.fillStyle = \"pink\";\n    snake.forEach(segment => context.fillRect(segment.x, segment.y, 1, 1));\n    context.fillStyle = \"lightblue\";\n    apples.forEach(apple => context.fillRect(apple.x, apple.y, 1, 1));\n  }, [snake, apples, gameOver]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 20\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lucasmocellin/react-snake-starter-files/react-snake-finished/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apples","setApples","dir","setDir","speed","setSpeed","gameOver","setGameOver","gameLoop","endGame","moveSnake","keyCode","createApple","x","Math","floor","random","y","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newApples","i","newApple","some","apple","push","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","initialApples","context","current","getContext","setTransform","clearRect","fillStyle","forEach","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport {\n  CANVAS_SIZE,\n  SNAKE_START,\n  SCALE,\n  SPEED,\n  DIRECTIONS\n} from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apples, setApples] = useState([]);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({ keyCode }) =>\n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApple = () => {\n    const x = Math.floor(Math.random() * (CANVAS_SIZE[0] / SCALE));\n    const y = Math.floor(Math.random() * (CANVAS_SIZE[1] / SCALE));\n    return { x, y };\n  };\n\n  const checkCollision = (piece, snk = snake) => {\n    if (\n      piece.x * SCALE >= CANVAS_SIZE[0] ||\n      piece.x < 0 ||\n      piece.y * SCALE >= CANVAS_SIZE[1] ||\n      piece.y < 0\n    )\n      return true;\n\n    for (const segment of snk) {\n      if (piece.x === segment.x && piece.y === segment.y) return true;\n    }\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    let newApples = [];\n\n    for (let i = 0; i < 4; i++) {\n      let newApple = createApple();\n      while (checkCollision(newApple, newSnake) || newApples.some(apple => apple.x === newApple.x && apple.y === newApple.y)) {\n        newApple = createApple();\n      }\n      newApples.push(newApple);\n    }\n\n    setApples(newApples);\n    return true;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = { x: snakeCopy[0].x + dir[0], y: snakeCopy[0].y + dir[1] };\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    const initialApples = [];\n    for (let i = 0; i < 4; i++) {\n      initialApples.push(createApple());\n    }\n    setApples(initialApples);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, CANVAS_SIZE[0], CANVAS_SIZE[1]);\n\n    context.fillStyle = \"pink\";\n    snake.forEach(segment => context.fillRect(segment.x, segment.y, 1, 1));\n\n\n    context.fillStyle = \"lightblue\";\n    apples.forEach(apple => context.fillRect(apple.x, apple.y, 1, 1));\n\n  }, [snake, apples, gameOver]);\n\n  return (\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n      <canvas\n        style={{ border: \"1px solid black\" }}\n        ref={canvasRef}\n        width={`${CANVAS_SIZE[0]}px`}\n        height={`${CANVAS_SIZE[1]}px`}\n      />\n      {gameOver && <div>GAME OVER!</div>}\n      <button onClick={startGame}>Start Game</button>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}