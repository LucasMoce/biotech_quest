{"ast":null,"code":"var _jsxFileName = \"/home/lucasmocellin/react-snake-starter-files/react-snake-finished/src/App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, SCALE, SPEED, DIRECTIONS } from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apples, setApples] = useState(createApples(4)); // Inicialize com 4 maçãs.\n\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApples = count => {\n    const apples = [];\n\n    for (let i = 0; i < count; i++) {\n      let newApple;\n\n      do {\n        newApple = [Math.floor(Math.random() * (CANVAS_SIZE[0] / SCALE)), Math.floor(Math.random() * (CANVAS_SIZE[1] / SCALE))];\n      } while (checkCollision(newApple));\n\n      apples.push(newApple);\n    }\n\n    return apples;\n  };\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    let appleEaten = false;\n\n    for (const applePos of apples) {\n      if (newSnake[0][0] === applePos[0] && newSnake[0][1] === applePos[1]) {\n        appleEaten = true;\n        break;\n      }\n    }\n\n    if (appleEaten) {\n      setApples(createApples(4)); // Recrie as maçãs.\n\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApples(createApples(4)); // Inicialize com 4 maçãs.\n\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"lightblue\";\n    apples.forEach(apple => context.fillRect(apple[0], apple[1], 1, 1));\n  }, [snake, apples, gameOver]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 20\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lucasmocellin/react-snake-starter-files/react-snake-finished/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apples","setApples","createApples","dir","setDir","speed","setSpeed","gameOver","setGameOver","gameLoop","endGame","moveSnake","keyCode","count","i","newApple","Math","floor","random","checkCollision","push","piece","snk","segment","checkAppleCollision","newSnake","appleEaten","applePos","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","context","current","getContext","setTransform","clearRect","window","innerWidth","innerHeight","fillStyle","forEach","x","y","fillRect","apple","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport {\n  CANVAS_SIZE,\n  SNAKE_START,\n  SCALE,\n  SPEED,\n  DIRECTIONS\n} from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apples, setApples] = useState(createApples(4)); // Inicialize com 4 maçãs.\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({ keyCode }) =>\n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApples = (count) => {\n    const apples = [];\n    for (let i = 0; i < count; i++) {\n      let newApple;\n      do {\n        newApple = [\n          Math.floor(Math.random() * (CANVAS_SIZE[0] / SCALE)),\n          Math.floor(Math.random() * (CANVAS_SIZE[1] / SCALE))\n        ];\n      } while (checkCollision(newApple));\n      apples.push(newApple);\n    }\n    return apples;\n  };\n\n  const checkCollision = (piece, snk = snake) => {\n    if (\n      piece[0] * SCALE >= CANVAS_SIZE[0] ||\n      piece[0] < 0 ||\n      piece[1] * SCALE >= CANVAS_SIZE[1] ||\n      piece[1] < 0\n    )\n      return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    let appleEaten = false;\n    \n    for (const applePos of apples) {\n      if (newSnake[0][0] === applePos[0] && newSnake[0][1] === applePos[1]) {\n        appleEaten = true;\n        break;\n      }\n    }\n    \n    if (appleEaten) {\n      setApples(createApples(4)); // Recrie as maçãs.\n      return true;\n    }\n    \n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApples(createApples(4)); // Inicialize com 4 maçãs.\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"lightblue\";\n    apples.forEach(apple => context.fillRect(apple[0], apple[1], 1, 1));\n  }, [snake, apples, gameOver]);\n\n  return (\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n      <canvas\n        style={{ border: \"1px solid black\" }}\n        ref={canvasRef}\n        width={`${CANVAS_SIZE[0]}px`}\n        height={`${CANVAS_SIZE[1]}px`}\n      />\n      {gameOver && <div>GAME OVER!</div>}\n      <button onClick={startGame}>Start Game</button>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}