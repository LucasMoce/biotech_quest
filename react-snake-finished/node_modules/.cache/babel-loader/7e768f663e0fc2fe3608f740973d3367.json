{"ast":null,"code":"var _jsxFileName = \"/home/lucasmocellin/react-snake-starter-files/react-snake-finished/src/App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, SCALE, SPEED, DIRECTIONS } from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apples, setApples] = useState([]);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const appleSymbols = ['A', 'T', 'C', 'G'];\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const generateUniqueApple = () => {\n    let newApple;\n\n    do {\n      newApple = [Math.floor(Math.random() * (CANVAS_SIZE[0] / SCALE)), Math.floor(Math.random() * (CANVAS_SIZE[1] / SCALE))];\n    } while (checkCollision(newApple) || apples.some(apple => apple[0] === newApple[0] && apple[1] === newApple[1]));\n\n    return newApple;\n  };\n\n  const createApples = count => {\n    const newApples = [];\n\n    for (let i = 0; i < count; i++) {\n      newApples.push(generateUniqueApple());\n    }\n\n    return newApples;\n  };\n\n  const generateRandomSequence = () => {\n    const possibleLetters = [\"A\", \"C\", \"T\", \"G\"];\n    const sequenceLength = Math.floor(Math.random() * 10) + 1;\n    const sequence = [];\n\n    for (let i = 0; i < sequenceLength; i++) {\n      const randomIndex = Math.floor(Math.random() * possibleLetters.length);\n      const randomLetter = possibleLetters[randomIndex];\n      sequence.push(randomLetter);\n    }\n\n    return sequence.join(\"\");\n  };\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    let ateApples = 0;\n    let newApples = [...apples];\n\n    for (let i = 0; i < newSnake.length; i++) {\n      for (let j = 0; j < newApples.length; j++) {\n        if (newSnake[i][0] === newApples[j][0] && newSnake[i][1] === newApples[j][1]) {\n          newApples.splice(j, 1);\n          ateApples++;\n        }\n      }\n    }\n\n    if (ateApples > 0) {\n      const additionalApples = createApples(4 - newApples.length); // Gere apenas o número restante de maçãs\n\n      newApples = [...newApples, ...additionalApples];\n      setApples(newApples.slice(0, 4)); // Mantenha apenas as primeiras 4 maçãs\n\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    const initialApples = createApples(4); // Inicialmente, gere 4 maçãs\n\n    setApples(initialApples);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.font = \"1px Arial\"; // Defina o tamanho e a fonte da letra\n\n    context.textAlign = \"center\";\n    context.textBaseline = \"middle\";\n    apples.forEach(([x, y], index) => {\n      context.fillStyle = \"lightblue\";\n      context.fillRect(x, y, 1, 1);\n      context.fillStyle = \"black\";\n      context.fillText(appleSymbols[index], x + 0.5, y + 0.5);\n    });\n  }, [snake, apples, gameOver, appleSymbols]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"sequence-display\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 20\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lucasmocellin/react-snake-starter-files/react-snake-finished/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apples","setApples","dir","setDir","speed","setSpeed","gameOver","setGameOver","appleSymbols","gameLoop","endGame","moveSnake","keyCode","generateUniqueApple","newApple","Math","floor","random","checkCollision","some","apple","createApples","count","newApples","i","push","generateRandomSequence","possibleLetters","sequenceLength","sequence","randomIndex","length","randomLetter","join","piece","snk","segment","checkAppleCollision","newSnake","ateApples","j","splice","additionalApples","slice","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","initialApples","context","current","getContext","setTransform","clearRect","window","innerWidth","innerHeight","fillStyle","forEach","x","y","fillRect","font","textAlign","textBaseline","index","fillText","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport {\n  CANVAS_SIZE,\n  SNAKE_START,\n  SCALE,\n  SPEED,\n  DIRECTIONS\n} from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apples, setApples] = useState([]);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const appleSymbols = ['A', 'T', 'C', 'G'];\n\n\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({ keyCode }) =>\n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n    const generateUniqueApple = () => {\n      let newApple;\n      do {\n        newApple = [\n          Math.floor(Math.random() * (CANVAS_SIZE[0] / SCALE)),\n          Math.floor(Math.random() * (CANVAS_SIZE[1] / SCALE))\n        ];\n      } while (checkCollision(newApple) || apples.some(apple => apple[0] === newApple[0] && apple[1] === newApple[1]));\n      return newApple;\n    };\n    \n    const createApples = (count) => {\n      const newApples = [];\n      for (let i = 0; i < count; i++) {\n        newApples.push(generateUniqueApple());\n      }\n      return newApples;\n    };\n\n    const generateRandomSequence = () => {\n      const possibleLetters = [\"A\", \"C\", \"T\", \"G\"];\n      const sequenceLength = Math.floor(Math.random() * 10) + 1;\n  \n      const sequence = [];\n      for (let i = 0; i < sequenceLength; i++) {\n        const randomIndex = Math.floor(Math.random() * possibleLetters.length);\n        const randomLetter = possibleLetters[randomIndex];\n        sequence.push(randomLetter);\n      }\n  \n      return sequence.join(\"\");\n    };\n    \n  \n    \n    \n\n\n  const checkCollision = (piece, snk = snake) => {\n    if (\n      piece[0] * SCALE >= CANVAS_SIZE[0] ||\n      piece[0] < 0 ||\n      piece[1] * SCALE >= CANVAS_SIZE[1] ||\n      piece[1] < 0\n    )\n      return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    let ateApples = 0;\n    let newApples = [...apples];\n  \n    for (let i = 0; i < newSnake.length; i++) {\n      for (let j = 0; j < newApples.length; j++) {\n        if (newSnake[i][0] === newApples[j][0] && newSnake[i][1] === newApples[j][1]) {\n          newApples.splice(j, 1);\n          ateApples++;\n        }\n      }\n    }\n  \n    if (ateApples > 0) {\n      const additionalApples = createApples(4 - newApples.length); // Gere apenas o número restante de maçãs\n      newApples = [...newApples, ...additionalApples];\n      setApples(newApples.slice(0, 4)); // Mantenha apenas as primeiras 4 maçãs\n      return true;\n    }\n    return false;\n  };\n  \n  \n  \n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    const initialApples = createApples(4); // Inicialmente, gere 4 maçãs\n    setApples(initialApples);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n  \n    context.font = \"1px Arial\"; // Defina o tamanho e a fonte da letra\n    context.textAlign = \"center\";\n    context.textBaseline = \"middle\";\n  \n    apples.forEach(([x, y], index) => {\n      context.fillStyle = \"lightblue\";\n      context.fillRect(x, y, 1, 1);\n      context.fillStyle = \"black\";\n      context.fillText(appleSymbols[index], x + 0.5, y + 0.5);\n    });\n  }, [snake, apples, gameOver, appleSymbols]);\n  \n\n\n  return (\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n      <canvas\n        style={{ border: \"1px solid black\" }}\n        ref={canvasRef}\n        width={`${CANVAS_SIZE[0]}px`}\n        height={`${CANVAS_SIZE[1]}px`}\n      />\n      <div id=\"sequence-display\" style={{ textAlign: \"center\" }}></div>\n      {gameOver && <div>GAME OVER!</div>}\n      <button onClick={startGame}>Start Game</button>\n    </div>\n  );\n};\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}