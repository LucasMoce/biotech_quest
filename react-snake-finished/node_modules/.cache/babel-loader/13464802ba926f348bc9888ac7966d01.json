{"ast":null,"code":"var _jsxFileName = \"/home/lucasmocellin/react-snake-starter-files/react-snake-finished/src/App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { CANVAS_SIZE, SNAKE_START, APPLE_START, SCALE, SPEED, DIRECTIONS } from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [apples, setApples] = useState([]);\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n  const createApple = () => {\n    const newApples = [];\n\n    for (let i = 0; i < 4; i++) {\n      let newApple;\n\n      do {\n        newApple = [Math.floor(Math.random() * (CANVAS_SIZE[0] / SCALE)), Math.floor(Math.random() * (CANVAS_SIZE[1] / SCALE))];\n      } while (checkCollision(newApple, snake) || newApples.some(a => a[0] === newApple[0] && a[1] === newApple[1]));\n\n      newApples.push(newApple);\n    }\n\n    setApples(newApples);\n  };\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = createApple();\n\n      while (checkCollision(newApple, newSnake)) {\n        newApple = createApple();\n      }\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"lightblue\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 20\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/lucasmocellin/react-snake-starter-files/react-snake-finished/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","SNAKE_START","APPLE_START","SCALE","SPEED","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","apples","setApples","gameLoop","endGame","moveSnake","keyCode","createApple","newApples","i","newApple","Math","floor","random","checkCollision","some","a","push","piece","snk","segment","checkAppleCollision","newSnake","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","context","current","getContext","setTransform","clearRect","window","innerWidth","innerHeight","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport {\n  CANVAS_SIZE,\n  SNAKE_START,\n  APPLE_START,\n  SCALE,\n  SPEED,\n  DIRECTIONS\n} from \"./constants\";\n\nconst App = () => {\n  const canvasRef = useRef();\n  const [snake, setSnake] = useState(SNAKE_START);\n  const [apple, setApple] = useState(APPLE_START);\n  const [dir, setDir] = useState([0, -1]);\n  const [speed, setSpeed] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [apples, setApples] = useState([]);\n\n\n  useInterval(() => gameLoop(), speed);\n\n  const endGame = () => {\n    setSpeed(null);\n    setGameOver(true);\n  };\n\n  const moveSnake = ({ keyCode }) =>\n    keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]);\n\n    const createApple = () => {\n      const newApples = [];\n      for (let i = 0; i < 4; i++) {\n        let newApple;\n        do {\n          newApple = [\n            Math.floor(Math.random() * (CANVAS_SIZE[0] / SCALE)),\n            Math.floor(Math.random() * (CANVAS_SIZE[1] / SCALE)),\n          ];\n        } while (checkCollision(newApple, snake) || newApples.some(a => a[0] === newApple[0] && a[1] === newApple[1]));\n        newApples.push(newApple);\n      }\n      setApples(newApples);\n    };\n    \n\n  const checkCollision = (piece, snk = snake) => {\n    if (\n      piece[0] * SCALE >= CANVAS_SIZE[0] ||\n      piece[0] < 0 ||\n      piece[1] * SCALE >= CANVAS_SIZE[1] ||\n      piece[1] < 0\n    )\n      return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = createApple();\n      while (checkCollision(newApple, newSnake)) {\n        newApple = createApple();\n      }\n      setApple(newApple);\n      return true;\n    }\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(SPEED);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"lightblue\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n\n  return (\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n      <canvas\n        style={{ border: \"1px solid black\" }}\n        ref={canvasRef}\n        width={`${CANVAS_SIZE[0]}px`}\n        height={`${CANVAS_SIZE[1]}px`}\n      />\n      {gameOver && <div>GAME OVER!</div>}\n      <button onClick={startGame}>Start Game</button>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}